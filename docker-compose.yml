version: "3"
services:
  # nginx:
  #   build:
  #     context: ./docker/services/nginx
  #     args:
  #       NGINX_VERSION: nginx:${NGINX_VERSION}
  #       CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #       NGINX_INSTALL_APPS: ${NGINX_INSTALL_APPS}
  #   container_name: nginx
  #   ports:
  #     - "${NGINX_HTTP_HOST_PORT}:80"
  #   volumes:
  #     - ${SOURCE_DIR}:/home/www/:rw
  #     - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d/:rw
  #     - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
  #     - ${NGINX_LOG_DIR}:/var/log/nginx/:rw
  #   environment:
  #     TZ: "$TZ"
  #   networks:
  #     - default
  #   restart: always

  # golang:
  #   build:
  #     context: ./docker/services/golang
  #     args:
  #       CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
  #   container_name: golang
  #   environment:
  #     - "TIMEZONE=Asia/Shanghai"
  #     - "APP_SYSTEM_ENV=docker"
  #   working_dir: "/home/www"
  #   ports:
  #     - "9400:9400"
  #     - "9401:9401"
  #     - "9402:9402"
  #   volumes:
  #     - ${SOURCE_DIR}:/home/www/:rw
  #     - comma:/home/www/comma:rw
  #     - config:/home/www/config:rw
  #     - data:/home/www/data:rw
  #     - static:/home/www/static:rw
  #   command:
  #     - /home/www/comma
  #     - -env=dev
  #   cap_add:
  #     - SYS_PTRACE
  #   networks:
  #     - default
  #   # restart: always

  # elasticsearch:
  #   build:
  #     context: ./docker/services/elasticsearch
  #     args:
  #       ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}
  #       ELASTICSEARCH_PLUGINS: ${ELASTICSEARCH_PLUGINS}
  #   container_name: elasticsearch
  #   environment:
  #     - TZ=$TZ
  #     - discovery.type=single-node
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   volumes:
  #     - ${DATA_DIR}/esdata:/usr/share/elasticsearch/data
  #     - ${ELASTICSEARCH_CONF_FILE}:/usr/share/elasticsearch/config/elasticsearch.yml
  #   hostname: elasticsearch
  #   ports:
  #     - "${ELASTICSEARCH_HOST_PORT_C}:9200"
  #     - "${ELASTICSEARCH_HOST_PORT_S}:9300"
  #   # restart: always

  mysql:
    build:
      context: ./docker/services/mysql
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    privileged: true
    volumes:
      - ${DATA_DIR}/mysql:/var/lib/mysql
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - default
    # restart: always

  pushgateway:
    build:
      context: ./docker/services/pushgateway
    expose:
      - 9091
    ports:
      - "9091:9091"
    # restart: always

  prometheus:
    build:
      context: ./docker/services/prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./docker/services/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - default
    # restart: always

  loki:
    build:
      context: ./docker/services/loki
    environment:
      - TZ=${TZ}
    ports:
      - "3100:3100"
    volumes:
      - ./docker/services/loki:/etc/loki/config
      - ./docker/data/loki/index:/opt/loki/index
      - ./docker/data/loki/chunks:/opt/loki/chunks
    command: -config.file=/etc/loki/config/loki.yaml
    networks:
      - default
    # restart: always

  promtail:
    build:
      context: ./docker/services/promtail
    environment:
      - TZ=${TZ}
    volumes:
      - /var/log:/var/log
      - ./logs:/var/log/comma
      - ./docker/services/promtail:/etc/promtail/config
    command: -config.file=/etc/promtail/config/promtail.yaml
    networks:
      - default
    # restart: always

  grafana:
    build:
      context: ./docker/services/grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - default
    # restart: always

  pyroscope:
    image: ./docker/services/pyroscope
    ports:
      - "${PYROSCOPE}:4040"
    command:
      - "server"
    networks:
      - default
    # restart: always

networks:
  default:
    driver: bridge
    ipam:
      driver: default
